# -*- coding: utf-8 -*-
# !/usr/bin/env python3
"""
@Author  : ziheng.ni
@Time    : 2021/2/8 13:24
@Contact : nzh199266@163.com
@Desc    : 生成器模式
"""

# 生成器模式
# 也叫“建造者模式”，Builder。
#
# 用于分步骤创建复杂对象，该模式允许使用相同的创建代码生成不同类型和形式的对象。
#


# 业务场景
# 假设你有这样一个复杂的对象，在对其进行构造时需要诸多成员变量和嵌套对象进行繁复的初始化工作。
# 这样一来，初始化代码通常深藏于一个包含众多参数且让人难以理解的构造函数中。甚至，这些代码散落在客户端代码的多个位置。
#


# 解决方案
# 生成器模式建议将对象构造代码从产品类中抽取出来，并将其放在一个名为生成器的独立对象中。


# 适用场景
# 1. 适用生成器模式可以避免“重叠构造函数（telescopic constructor）”的出现。
#    此处“重叠构造函数”指的是构造函数中有很多参数，然后通过子类重载构造函数。
# 2. 当需要创建各种形式的产品时，他们的制造过程相似，仅在细节上的差异。
# 3. 使用生成器模式构造组合树或其他复杂对象。
# 4. 一定要清晰、明确地定义通用步骤，否则无法进一步实施生成器模式。


# 优势：
# 1. 可以分步创建对象，暂缓创建步骤或者递归运行创建步骤。
# 2. 生成不同形式的产品时，可以复用相同的制造代码。
# 3. 单一职责原则。可以将复杂的构造代码从产品的业务逻辑中分离出来。
#
# 劣势：
# 1. 由于生成器模式需要增加多个类，代码整体复杂度会增加。

